{"version":3,"file":"SignInPage-CfRIlLE9.js","sources":["../../src/components/SignInForm/signInSchema.js","../../src/components/SignInForm/SignInForm.jsx","../../src/pages/SignInPage/SignInPage.jsx"],"sourcesContent":["import * as Yup from \"yup\";\nimport { formatRegex, passwordRegex } from \"../../helpers/constants\";\n\nexport const signInSchema = Yup.object().shape({\n    email: Yup.string()\n        .matches(\n            formatRegex,\n            \"Invalid email format\"\n        )\n        .required(\"Required\"),\n    password: Yup.string()\n        .matches(\n            passwordRegex,\n            \"Password must be at least 6 characters long, include one uppercase letter, one number, and one special character\"\n        )\n});","import { NavLink } from 'react-router-dom';\nimport { useEffect, useId, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useTranslation } from 'react-i18next';\n\nimport WrapperWelcome from '../../shared/components/WrapperWelcome/WrapperWelcome';\nimport GoogleBtn from '../../shared/components/GoogleBtn/GoogleBtn';\nimport { formValuesSignIn } from '../../helpers/constants';\nimport { signInSchema } from './signInSchema';\n\nimport { icons as sprite } from '../../shared/icons/index';\nimport style from '../UserForm.module.css';\nimport s from './SignInForm.module.css';\nimport { logIn, refreshUser } from '../../redux/auth/operation';\nimport toast from 'react-hot-toast';\nimport { selectIsLoggedIn } from '../../redux/auth/selectors';\n\nconst SignInForm = () => {\n  const { t } = useTranslation();\n  const [openPassword, setOpenPassword] = useState(false);\n\n  const emailId = useId();\n  const passwordId = useId();\n\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n    reset,\n  } = useForm({\n    defaultValues: formValuesSignIn,\n    resolver: yupResolver(signInSchema),\n    mode: 'onTouched',\n  });\n\n  const handelClickPassword = () => {\n    setOpenPassword((prevState) => !prevState);\n  };\n\n  const onSubmit = async (data) => {\n    try {\n      await dispatch(logIn(data)).unwrap();\n      reset();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (errors.password) {\n      toast.error(t('signInPage.passwordSpanError'));\n    } else if (errors.email) {\n      toast.error(t('signInPage.emailSpanError'));\n    }\n  });\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      dispatch(refreshUser());\n    }\n  }, [isLoggedIn, dispatch]);\n\n  return (\n    <>\n      <WrapperWelcome\n        classNameLogo={style.form}\n        classNameWelcom={style.welcomPadding}\n      >\n        <div className={`${style.formBlock} ${s.formPosition}`}>\n          <h2 className={style.formTitle}>{t('signInPage.signIn')}</h2>\n\n          <form className={style.mainForm} onSubmit={handleSubmit(onSubmit)}>\n            <div className={style.fieldThumb}>\n              <label className={style.formLabel} htmlFor={emailId}>\n                {t('signInPage.email')}\n              </label>\n              <input\n                className={`${style.formInput} ${errors.email && style.errorName}`}\n                type=\"text\"\n                name=\"email\"\n                id={emailId}\n                placeholder={t('signInPage.emailPlaceholder')}\n                {...register('email')}\n              />\n              {errors.email && (\n                <span className={style.errorSpan}>\n                  {t('signInPage.emailSpanError')}\n                </span>\n              )}\n            </div>\n\n            <div className={style.fieldThumb}>\n              <label className={style.formLabel} htmlFor={passwordId}>\n                {t('signInPage.password')}\n              </label>\n              <div className={style.passwordWrapper}>\n                <input\n                  className={`${style.formInput} ${errors.password && style.errorName}`}\n                  type={openPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  id={passwordId}\n                  placeholder={t('signInPage.passwordPlaceholder')}\n                  {...register('password')}\n                />\n                {openPassword ? (\n                  <button\n                    onClick={handelClickPassword}\n                    className={style.eyeBtn}\n                  >\n                    <svg className={`${style.iconeye}`}>\n                      <use xlinkHref={`${sprite}#eye`} />\n                    </svg>\n                  </button>\n                ) : (\n                  <button\n                    onClick={handelClickPassword}\n                    className={style.eyeBtn}\n                  >\n                    <svg className={`${style.iconeye}`}>\n                      <use xlinkHref={`${sprite}#eye-off`} />\n                    </svg>\n                  </button>\n                )}\n              </div>\n\n              {errors.password && (\n                <span className={style.errorSpan}>\n                  {t('signInPage.passwordSpanError')}\n                </span>\n              )}\n            </div>\n\n            <button\n              type=\"submit\"\n              className={style.btnform}\n              disabled={!isDirty || !isValid}\n            >\n              {t('signInPage.signIn')}\n            </button>\n          </form>\n\n          <GoogleBtn type=\"In\" />\n\n          <div className={s.haveAccountSignIn}>\n            <div className={s.question}>\n              <p className={style.haveAccountText}>\n                {t('signInPage.dontAccount')}\n              </p>{' '}\n              <NavLink to=\"/signup\" className={style.haveAccountForm}>\n                {t('signInPage.signUp')}\n              </NavLink>\n            </div>\n            <div className={s.question}>\n              <p className={style.haveAccountText}>\n                {t('signInPage.forgotPassword')}\n              </p>{' '}\n              <NavLink to=\"/forgot\" className={style.haveAccountForm}>\n                {t('signInPage.renew')}\n              </NavLink>\n            </div>\n          </div>\n        </div>\n      </WrapperWelcome>\n    </>\n  );\n};\n\nexport default SignInForm;\n","import { Helmet } from 'react-helmet-async';\nimport Container from '../../shared/components/Container/Container';\nimport AdvantagesSection from '../../components/Home/AdvantagesSection/AdvantagesSection';\nimport SignInForm from '../../components/SignInForm/SignInForm';\nimport style from './SignInPage.module.css';\nimport { useMedia } from '../../hooks/useMedia';\nimport Languages from '../../shared/components/Languages/Languages';\nimport { useTranslation } from 'react-i18next';\n\nconst SignInPage = () => {\n  const { isDesktop } = useMedia();\n  const { t } = useTranslation();\n  return (\n    <>\n      <Helmet>\n        <title>{t('page.signIn')}</title>\n      </Helmet>\n\n      <Container>\n        <div className={style.wrapperStyle}>\n          <Languages />\n          <div className={style.wrapperHome}>\n            <SignInForm />\n            {isDesktop && <AdvantagesSection />}\n          </div>\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default SignInPage;\n"],"names":["signInSchema","Yup.object","Yup.string","formatRegex","passwordRegex","SignInForm","t","useTranslation","openPassword","setOpenPassword","useState","emailId","useId","passwordId","dispatch","useDispatch","isLoggedIn","useSelector","selectIsLoggedIn","register","handleSubmit","errors","isDirty","isValid","reset","useForm","formValuesSignIn","yupResolver","handelClickPassword","prevState","onSubmit","data","logIn","error","useEffect","toast","refreshUser","jsx","Fragment","WrapperWelcome","style","jsxs","s","sprite","GoogleBtn","NavLink","SignInPage","isDesktop","useMedia","Helmet","Container","Languages","AdvantagesSection"],"mappings":"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"}