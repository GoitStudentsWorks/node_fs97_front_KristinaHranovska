{"version":3,"file":"SignUpPage-BzT1Z1R2.js","sources":["../../src/components/SignUpForm/signUpSchema.js","../../src/components/SignUpForm/SignUpForm.jsx","../../src/pages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import * as Yup from \"yup\";\nimport { formatRegex, isValidLatinInput, passwordRegex } from \"../../helpers/constants\";\n\nexport const signUpSchema = Yup.object().shape({\n    name: Yup.string().matches(isValidLatinInput, \"A comment can only contain Latin characters\").required(\"Required\"),\n    email: Yup.string()\n        .matches(\n            formatRegex,\n            \"Invalid email format\"\n        )\n        .required(\"Required\"),\n    password: Yup.string()\n        .matches(\n            passwordRegex,\n            \"Password must be at least 6 characters long, include one uppercase letter, one number, and one special character\"\n        )\n        .required(\"Required\"),\n    repeatPassword: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required(\"Required\")\n});","import { useEffect, useId, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch } from 'react-redux';\nimport toast from 'react-hot-toast';\nimport { useTranslation } from 'react-i18next';\n\nimport WrapperWelcome from '../../shared/components/WrapperWelcome/WrapperWelcome';\nimport { signUpSchema } from './signUpSchema';\nimport GoogleBtn from '../../shared/components/GoogleBtn/GoogleBtn';\nimport { formValuesSignUp } from '../../helpers/constants';\nimport { registerUser } from '../../redux/auth/operation';\n\nimport { icons as sprite } from '../../shared/icons/index';\nimport style from '../UserForm.module.css';\nimport s from './SignUpPage.module.css';\n\nconst SignUpForm = () => {\n  const { t } = useTranslation();\n  const [openPassword, setOpenPassword] = useState(false);\n  const [openRepeatPassword, setOpenRepeatPassword] = useState(false);\n\n  const nameId = useId();\n  const emailId = useId();\n  const passwordId = useId();\n  const repeatPasswordId = useId();\n\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n    reset,\n  } = useForm({\n    defaultValues: formValuesSignUp,\n    resolver: yupResolver(signUpSchema),\n    mode: 'onTouched',\n  });\n\n  const handelClickPassword = () => {\n    setOpenPassword((prevState) => !prevState);\n  };\n  const handelClickRepeatPassword = () => {\n    setOpenRepeatPassword((prevState) => !prevState);\n  };\n\n  const onSubmit = (data) => {\n    const userData = { ...data };\n    delete userData.repeatPassword;\n\n    try {\n      dispatch(registerUser(userData));\n      reset();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (errors.password) {\n      toast.error(t('signUpPage.passwordSpanError'));\n    } else if (errors.email) {\n      toast.error(t('signUpPage.emailSpanError'));\n    } else if (errors.name) {\n      toast.error(t('signUpPage.nameSpanError'));\n    } else if (errors.repeatPassword) {\n      toast.error(t('signUpPage.repeatPasswordpanErrorTwo'));\n    }\n  });\n\n  return (\n    <>\n      <WrapperWelcome\n        classNameLogo={`${style.form} ${s.form}`}\n        classNameWelcom={`${style.welcomPadding} ${s.welcomPadding}`}\n      >\n        <div className={style.formBlock}>\n          <h2 className={style.formTitle}>{t('signUpPage.signUp')}</h2>\n\n          <form className={style.mainForm} onSubmit={handleSubmit(onSubmit)}>\n            <div className={style.fieldThumb}>\n              <label className={style.formLabel} htmlFor={nameId}>\n                {t('signUpPage.name')}\n              </label>\n              <input\n                className={`${style.formInput} ${errors.name && style.errorName}`}\n                type=\"text\"\n                name=\"name\"\n                id={nameId}\n                placeholder={t('signUpPage.namePlaceholder')}\n                {...register('name')}\n              />\n              {errors.name && (\n                <span className={style.errorSpan}>\n                  {t('signUpPage.nameSpanError')}\n                </span>\n              )}\n            </div>\n\n            <div className={style.fieldThumb}>\n              <label className={style.formLabel} htmlFor={emailId}>\n                {t('signUpPage.email')}\n              </label>\n              <input\n                className={`${style.formInput} ${errors.email && style.errorName}`}\n                type=\"text\"\n                name=\"email\"\n                id={emailId}\n                placeholder={t('signUpPage.emailPlaceholder')}\n                {...register('email')}\n              />\n              {errors.email && (\n                <span className={style.errorSpan}>\n                  {t('signUpPage.emailSpanError')}\n                </span>\n              )}\n            </div>\n\n            <div className={style.fieldThumb}>\n              <label className={style.formLabel} htmlFor={passwordId}>\n                {t('signUpPage.password')}\n              </label>\n              <div className={style.passwordWrapper}>\n                <input\n                  className={`${style.formInput} ${errors.password && style.errorName}`}\n                  type={openPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  id={passwordId}\n                  placeholder={t('signUpPage.passwordPlaceholder')}\n                  {...register('password')}\n                />\n                {openPassword ? (\n                  <button\n                    type=\"button\"\n                    onClick={handelClickPassword}\n                    className={style.eyeBtn}\n                  >\n                    <svg className={`${style.iconeye}`}>\n                      <use xlinkHref={`${sprite}#eye`} />\n                    </svg>\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    onClick={handelClickPassword}\n                    className={style.eyeBtn}\n                  >\n                    <svg className={`${style.iconeye}`}>\n                      <use xlinkHref={`${sprite}#eye-off`} />\n                    </svg>\n                  </button>\n                )}\n              </div>\n\n              {errors.password && (\n                <span className={style.errorSpan}>\n                  {t('signUpPage.passwordSpanError')}\n                </span>\n              )}\n            </div>\n\n            <div className={style.fieldThumb}>\n              <label className={style.formLabel} htmlFor={repeatPasswordId}>\n                {t('signUpPage.repeatPassword')}\n              </label>\n              <div className={style.passwordWrapper}>\n                <input\n                  className={`${style.formInput} ${style.formPhone} ${errors.repeatPassword && style.errorName}`}\n                  type={openRepeatPassword ? 'text' : 'password'}\n                  name=\"repeatPassword\"\n                  id={repeatPasswordId}\n                  placeholder={t('signUpPage.repeatPassword')}\n                  {...register('repeatPassword')}\n                />\n                {openRepeatPassword ? (\n                  <button\n                    type=\"button\"\n                    onClick={handelClickRepeatPassword}\n                    className={style.eyeBtn}\n                  >\n                    <svg className={`${style.iconeye}`}>\n                      <use xlinkHref={`${sprite}#eye`} />\n                    </svg>\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    onClick={handelClickRepeatPassword}\n                    className={style.eyeBtn}\n                  >\n                    <svg className={`${style.iconeye}`}>\n                      <use xlinkHref={`${sprite}#eye-off`} />\n                    </svg>\n                  </button>\n                )}\n              </div>\n\n              {errors.repeatPassword && (\n                <span className={style.errorSpan}>\n                  {t('signUpPage.repeatPasswordpanError')}\n                </span>\n              )}\n            </div>\n\n            <div className={s.btnForm}>\n              <button\n                type=\"submit\"\n                className={style.btnform}\n                disabled={!isDirty || !isValid}\n              >\n                {t('signUpPage.signUp')}\n              </button>\n              <GoogleBtn type=\"Up\" className={s.glg} />\n            </div>\n          </form>\n\n          <div className={style.haveAccount}>\n            <p className={style.haveAccountText}>\n              {t('signUpPage.textAlready')}\n            </p>{' '}\n            <NavLink to=\"/signin\" className={style.haveAccountForm}>\n              {t('signUpPage.signIn')}\n            </NavLink>\n          </div>\n        </div>\n      </WrapperWelcome>\n    </>\n  );\n};\n\nexport default SignUpForm;\n","import { Helmet } from 'react-helmet-async';\nimport AdvantagesSection from '../../components/Home/AdvantagesSection/AdvantagesSection';\nimport SignUpForm from '../../components/SignUpForm/SignUpForm';\nimport Container from '../../shared/components/Container/Container';\nimport style from './SignUpPage.module.css';\nimport { useMedia } from '../../hooks/useMedia';\nimport Languages from '../../shared/components/Languages/Languages';\nimport { useTranslation } from 'react-i18next';\n\nconst SignUpPage = () => {\n  const { t } = useTranslation();\n  const { isDesktop } = useMedia();\n  return (\n    <>\n      <Helmet>\n        <title>{t('page.signUp')}</title>\n      </Helmet>\n\n      <Container>\n        <div className={style.wrapperStyle}>\n          <Languages />\n          <div className={style.wrapperHome}>\n            <SignUpForm />\n            {isDesktop && <AdvantagesSection />}\n          </div>\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default SignUpPage;\n"],"names":["signUpSchema","Yup.object","Yup.string","isValidLatinInput","formatRegex","passwordRegex","Yup.ref","SignUpForm","t","useTranslation","openPassword","setOpenPassword","useState","openRepeatPassword","setOpenRepeatPassword","nameId","useId","emailId","passwordId","repeatPasswordId","dispatch","useDispatch","register","handleSubmit","errors","isDirty","isValid","reset","useForm","formValuesSignUp","yupResolver","handelClickPassword","prevState","handelClickRepeatPassword","onSubmit","data","userData","registerUser","error","useEffect","toast","jsx","Fragment","WrapperWelcome","style","s","jsxs","sprite","GoogleBtn","NavLink","SignUpPage","isDesktop","useMedia","Helmet","Container","Languages","AdvantagesSection"],"mappings":"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"}